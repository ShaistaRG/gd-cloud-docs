<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:mso="urn:schemas-microsoft-com:office:office" xmlns:msdt="uuid:C2F41010-65B3-11d1-A29F-00AA00C14882">

<head>
    <title>17716</title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
    <meta http-equiv="Content-Style-Type" content="text/css" />
    <style type="text/css">
    div.hacker {
        background-color: #666;
        border: 1px solid #ccc;
        color: #fff;
        font-family: "Lucida Console", "Courier New", Courier, fixed;
        font-size: 95%;
        line-height: 160%;
        margin-bottom: 1.5em;
        padding: 10px;
    }
    
    p.note {
        background-color: #ffffe6;
        border: 1px solid #eee;
        color: #666;
        padding: .8em 1.6em;
        margin: 15px 0;
    }
    
    .warning {
        border: 1px #d25100 solid;
        padding: .5em 1em .5em 4em;
        margin: 10px 20px 15px 20px;
        background-image: url('@{help-img-path}/img_warning.gif');
        background-repeat: no-repeat;
        background-position: left top;
        background-color: #ededed;
        -moz-border-radius: 0.8em;
        -webkit-border-radius: 0.8em;
        /* -moz-border-bottom-radius: 0;9 */
        -webkit-border-bottom-radius: 0;
        padding-top: 14px;
        padding-bottom: 15px;
    }
    </style>
</head>

<body>
    <p>Setting up Rails application with Unicorn and NGINX in CentOS, Ruby, Rails, NGINX</p>
    <h1>Deploy Rails App with Unicorn and NGINX – CentOS</h1>
    <p><strong>Difficulty</strong>: <em>2</em></p>
    <p><strong>Time</strong>: <em>30 minutes</em></p>
    <p>In this article, we will be configuring a multi-layer deployment installation to host Rails based Ruby web applications. To do this, we will use the powerful, flexible, and extremely successful Unicorn application server running behind Nginx. </p>
	 <p class='note'>Note: Assuming that we are logged in as a sudo user.</p>
   <h2>Step 1: Prepare deployment Server</h2>
     <ol>
        <li><a href="#">Install Ruby on Rails with rbenv – CentOS</a>
		</li>
		<li>Install bundle of development tool by using the following command
			<div class='hacker'>sudo yum groupinstall -y 'development tools'</div>
		</li>
		<li>Install EPEL repository and update the operating system
			<div class='hacker'>sudo wget http://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-	release-7-5.noarch.rpm</div>
			<div class='hacker'>sudo rpm -ivh epel-release-7-5.noarch.rpm</div>
			<div class='hacker'>sudo yum –y update</div>
		</li>
		<li>Now, we need to install curl-devel and some other dependencies  by using the following command
			<div class='hacker'>sudo yum install -y curl-devel nano sqlite-devel libyaml-devel</div>
		</li>
		<li>Install Nginx
			<div class='hacker'>sudo yum install nginx</div>
		</li>
		<li>Install Unicorn
			<div class='hacker'>gem install unicorn</div>
		</li>
	</ol>
   <h2>Step 2: Prepare Rail Application for Deployment</h2>
    <ol>
        <li>Create a directory 
            <div class='hacker'>sudo mkdir –p /var/www</div>
		</li>
        <li>Provide all permission for this directory and go to that directory
            <div class='hacker'>cd /var/</div>
			<div class='hacker'>sudo chmod 777  www/</div>
      </li>
        <li>Create a Rail Application in this directory
          <div class='hacker'>rails new HelloWorld
		 </div>
      </li>
        <li>Now move to the application directory
            <div class='hacker'>cd HelloWorld/</div>
        </li>
		<li>Create a sample resource
            <div class='hacker'>rails generate scaffold Task title:string note:text/</div>
        </li>
		<li>Create a sample database
            <div class='hacker'>  RAILS_ENV=development rake db:migrate
		<br/> RAILS_ENV=production  rake db:migrate
		</div>
        </li>
		<li>Create a directory to hold the PID files
            <div class='hacker'>mkdir pids</div>
        </li>
		<li>Enter the application directory and run the following command
            <div class='hacker'>rails s</div>
			<p>To terminate user, hit CTRL+C.</p>
        </li>
		<li>For binding to web browser, run the following command
            <div class='hacker'>rails server --binding=[your droplet's IP]</div>
        </li>
		<li>We can access it on any browser by visiting
		  <div class='hacker'>http://[your droplet's IP]:3000/tasks</div>
      </li>
		<li>To use PostgreSQL with the rail application, visit 
            <a href="#">Use PostgreSQL with the Ruby on Rails Application - CentOS </a> link
        </li>
		<li>Upload source code from
            <a href="#">Use SFTP to Securely Transfer Files with a Remote Server - ALL DISTROS</a> link
        </li>
		
</ol>
		
		<h2>Step 3: Configure Server</h2>
       <ol> <li>To configure Unicorn, move to the Rail Application directory
            <div class='hacker'>Cd /var/www/HelloWorld</div>
        </li>
        <li>Create a blank unicorn.rb document
            <div class='hacker'>sudo vim config/unicorn.rb</div>
        </li>
		<li>Add the following code in this file
            <div class='hacker'># Set the working application directory
<br/>	# working_directory "/path/to/your/app"
<br/>	working_directory "/var/www/HelloWorld"
<br/>
<br/>	# Unicorn PID file location
<br/>	# pid "/path/to/pids/unicorn.pid"
<br/>	pid "/var/www/HelloWorld /pids/unicorn.pid"
<br/>
<br/>	# Path to logs
<br/>	# stderr_path "/path/to/log/unicorn.log"
<br/>	# stdout_path "/path/to/log/unicorn.log"
<br/>	stderr_path "/var/www/HelloWorld/log/unicorn.log"
<br/>	stdout_path "/var/www/HelloWorld/log/unicorn.log"
<br/>
<br/>	# Unicorn socket
<br/>	listen "/tmp/unicorn.[app name].sock"
<br/>	listen "/tmp/unicorn.myapp.sock"
<br/>
<br/>	# Number of processes
<br/>	# worker_processes 4
<br/>	worker_processes 2
<br/>
<br/>	# Time-out
<br/>	timeout 30
	</div>
	<p>Save and exit.</p>
 	<p class='note'>Note: We can check the application with Unicorn by running the unicorn_rails inside the app directory.</p>
        </li>
		<li>Configure Nginx and enable it to communicate with Unicorn. To do this, we need to edit the default configuration file: default.conf and leave nginx.conf 
            <div class='hacker'>sudo vim /etc/nginx/nginx.conf.default</div>
        </li>
		<li>Swap the file’s content with the following lines
            <div class='hacker'>upstream app {
<br/>   	 # Path to Unicorn SOCK file, as defined previously
<br/>   	 server unix:/tmp/unicorn.HelloWorld.sock fail_timeout=0;
<br/>	}
<br/>
<br/>	server {
<br/>
<br/>   	 listen 80;
<br/>   	 server_name localhost;
<br/>
<br/>   	 # Application root, as defined previously
<br/>  	  root /root/HelloWorld/public;
<br/>
<br/>   	 try_files $uri/index.html $uri @app;
<br/>
<br/>   	 location @app {
<br/>          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
<br/>          proxy_set_header Host $http_host;
<br/>          proxy_redirect off;
<br/>          proxy_pass http://app;
<br/>   	 }
<br/>
<br/>    	error_page 500 502 503 504 /500.html;
<br/>     	client_max_body_size 4G;
<br/>    	keepalive_timeout 10;
<br/>	}  
	</div>
	<p>Save and exit.</p>
        </li>
</ol>
		
		<h2>Step 4: Manage the servers</h2>
       <ol> <li>Once we finish configuring both the servers, initiate the Unicorn and run it as a daemon by using the configuration file. Ensure that we are inside the application directory and run the following command
            <div class='hacker'>unicorn_rails -c config/unicorn.rb –D</div>
        </li>
        <li>Restart the nginx service
            <div class='hacker'>sudo service nginx restart
		     </div>
			 </li>
        <li>Test droplet's IP address (or the domain name associated to it)
            <div class='hacker'>http://[Your droplet's IP address]/tasks</div>
          
        </li></ol>
		<h2>Next Step</h2>
		By using all the above steps we will be able to deploy the Rails application with Unicorn and Nginx on Centos. 
</body>

</html>
